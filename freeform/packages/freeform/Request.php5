<?

/**
 * Instances of this class are passed to actions and the latter query request parameters 
 * and other user-related details. Using requests it is easy to emulate user gestures
 * and to create action chains when one action might want to call several other actions
 * without redirecting to them.
 *
 * Since the HTTP protocol is text-based, the empty form fields or empty get parameters
 * will be returned from this object as empty strings as opposed to nulls that are returned
 * if parameters were not passed with the request. Moreover, it would be impossible for the
 * remote client to pass the special value of null. Note that empty file upload fields will
 * be also returned as empty strings, not nulls. Null will be returned, for example, if 
 * the form that expects a file upload was not submitted.
 *
 * @author Dennis Popel  
 * @since 1.0.0 
 */ 
class Request {
  const METHOD_GET = 1;
  const METHOD_POST = 2;
  
  /**
   * This static property keeps the URL of the Freeform loader 
   * (i.e.: http://www.yourserver.com:80/index.php5).
   * It is possible to rename index.php5 (the loader) to other names such as freeform.php; in such case
   * this property will contain the correct value automatically.
   * For example, the <class>HTMLShowForm</class> uses this property to generate the <tt>action</tt>
   * attribute of the resulting <tt>form</tt> tag.
   * Also note that this property always contains absolute real URL of the loader, even if a
   * <class>LocationRewriter</class> is used to rewrite URLs generated by the <class>Location</class>
   * objects.
   * @since 1.2.0.Beta
   */
  static public $URL = '';
  
  private $method;
  private $cookies = array();     
  private $headers = array(); 
  private $parameters = array();
  private $location = null;
  
  /**
   * Create a new request with given parameters, cookies, and method. You may want to create 
   * instances of this class to pass them as parameters to the 
   * <method>Action::__construct</method> when you want to call another action within the 
   * main action.
   * @param  array $parameters  array of scalar name=>value pairs (get or post params)
   * @param  array $cookies     array of scalar name=>value pairs (cookies)
   * @param  array $headers     array of scalar name=>value pairs (headers)
   * @param  int $method        request method
   */
  function __construct($parameters = array(), $cookies = array(), $headers = array(), $method = Request::METHOD_GET) {
    $this->parameters = $parameters;
    $this->cookies = $cookies;
    $this->headers = $headers;
    $this->method = $method;
    $this->location = new Location($this->getParameter('action', Package::getPackageByName('freeform')->getProperty('action.default')), $this->parameters);
  }

  /**
   * Return the location of the current action 
   *
   * @return  Location  current location
   */
  function getLocation() {
    return $this->location;
  }
  
  /**
   * Get request parameter $name. An optional scalar $defValue can be specified to 
   * return if the parameter $key not found.
   *
   * @param   string $key        name of the parameter
   * @param   scalar $defValue   default value
   * @return  value of parameter $key or $defValue
   */
  function getParameter($key, $defValue = null) {
    if(array_key_exists($key, $this->parameters)) {
      return $this->parameters[$key]; 
    } else {
      return $defValue;
    }
  }
  
  /**
   * Return all parameters of this request
   * @return  array  all parameters
   */
  function getParameters() {
    return $this->parameters;
  }
  
  /**
   * Set a parameter for this request. Useful for overriding passed parameters for 
   * "embedded" action processing
   * @param  string $key  the parameter name
   * @param  string $value  the value to set. If null, the parameter will be removed
   * @since 1.2.0.Beta
   */
  function setParameter($key, $value) {
    if(is_null($value)) {
      unSet($this->parameters[$key]);
    } else {
      $this->parameters[$key] = $value;
    }
  }
  
  /**
   * Return the specified header
   * @param   string $header   the HTTP request header 
   * @return  string           the specified header or null
   */
  function getHeader($header) {
    $h = strtoupper($header);
    if(array_key_exists($h, $this->headers)) {
      return $this->headers[$h];
    } else {
      return null;
    }
  }
  
  /**
   * Return all request headers as an array
   * @return  array  the list of headers
   * @since 1.2.0.Beta
   */
  function getHeaders() {
    return $this->headers;
  }
  
  /**
   * Set an HTTP header for this request. Useful for overriding received headers for 
   * "embedded" action processing. Will convert the header name into upper case
   * @param  string $key  the header name
   * @param  string $value  the value to set. If null, the header will be removed
   * @since 1.2.0.Beta
   */
  function setHeader($key, $value) {
    $key = strToUpper($key);
    if(is_null($value)) {
      unSet($this->headers[$key]);
    } else {
      $this->headers[$key] = $value;
    }
  }
  
  /**
   * Get request cookie $name. An optional scalar $defValue can be specified to 
   * return if the parameter $key not found.
   * @param   string $key        name of the parameter
   * @param   scalar $defValue   default value
   * @return  value of parameter $key or $defValue
   */
  function getCookie($key, $defValue = null) {
    if(array_key_exists($key, $this->cookies)) {
      return $this->cookies[$key];
    } else {
      return $defValue;
    }
  }
  
  /**
   * Return all cookies that were received with this request
   * @return  array  the list of cookies
   * @since 1.2.0.Beta
   */
  function getCookies() {
    return $this->cookies;
  }
   
  /**
   * Set an HTTP cookie for this request. Useful for overriding received cookies for 
   * "embedded" action processing
   * @param  string $key  the cookie name
   * @param  string $value  the value to set. If null, the cookie will be removed (not from the client!)
   * @since 1.2.0.Beta
   */
  function setCookie($key, $value) {
    if(is_null($value)) {
      unSet($this->cookies[$key]);
    } else {
      $this->cookies[$key] = $value;
    }
  }
  
  /**
   * Return this request method
   * @return  int  method
   */
  function getMethod() {
    return $this->method;
  }
  
  /**
   * Create new request from HTTP parameters.
   * This method is used by ActionController to parse HTTP parameters to build initial Request
   * All instances of RequestAdaptor type will be queried and one that is
   * capable of processing content type of the request data will be instantiated.
   * Later the Request will query the Adaptor for parameters.
   *
   * <b>Note</b><br/>
   * This method is <i>always</i> called by the ActionController on every request.
   * @return  Request  request created from HTTP parameters (GET/POST/COOKIE and session referer)
   * @throws  ConfigurationException  if the config option <tt>locationRewriter</tt> specifies non-existent <class>LocationRewriter</class> 
   */
  static function parseHTTP() {
    // Create the URL
    $prot = split('/', $_SERVER['SERVER_PROTOCOL']);
    self::$URL = strtolower($prot[0]) . '://' . $_SERVER['SERVER_NAME'] . ':' . $_SERVER['SERVER_PORT'] . $_SERVER['PHP_SELF'];
    
    // Fake HTTP headers from $_SERVER and $_ENV
    $headers = array();
    foreach($_SERVER as $k=>$v) {
      if(substr($k, 0, 5) == 'HTTP_') {
        $headers[str_replace('_', '-', substr($k, 5))] = $v;
      } else {
        if($k == 'CONTENT_TYPE' || $k == 'CONTENT_LENGTH') {
          $headers[str_replace('_', '-', $k)] = $v;
        }
      }
    }

    // Get request method 
    $method = strToUpper($_SERVER['REQUEST_METHOD']) == 'POST' ? self::METHOD_POST : self::METHOD_GET;
    
    // Find proper request adaptor for POST methods
    $parameters = array();
    if($method == Request::METHOD_POST) {
      $ctype = $headers['CONTENT-TYPE'];
      $rads = get_instances_of('RequestAdaptor');
      foreach($rads as $ra) {
        $rac = new ReflectionClass($ra);
        $m = $rac->getMethod('isSupportedContentType');
        if($m->invoke(null, $ctype)) {
          $requestAdaptor = $rac->newInstance();
          $parameters = $requestAdaptor->getParameters($headers);
          break;
        }
      }
    } else {     
      // Decode the possibly encoded query string with the LocationRewriter
      $pkg = Package::getPackageByName('freeform');
      if($lrc = $pkg->getProperty('locationRewriter')) {
        try {
          $lrrc = new ReflectionClass($lrc);
          $lrm = $lrrc->getMethod('decode');
          $parameters = $lrm->invoke(null, $_SERVER['QUERY_STRING']);
        } catch(ReflectionException $re) {
          throw new ConfigurationException('freeform', 'locationRewriter', 'denotes non-existent class ' . $lrc);
        }
      } else {
        $parameters = $_GET;
      }
      if(get_magic_quotes_gpc()) {
        array_walk_recursive($parameters, 'strip_slashes_gpc');
      }
    }
    
    if(get_magic_quotes_gpc()) {
      array_walk_recursive($_COOKIE, 'strip_slashes_gpc');
    }
    
    return new Request($parameters, $_COOKIE, $headers, $method);
  }
}

?>